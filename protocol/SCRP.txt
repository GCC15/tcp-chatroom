This is the specification of the Stupid Chat Room Protocol (SCRP), a lightweight
application-layer communication protocol used in the project tcp-chatroom
(https://github.com/GCC15/tcp-chatroom). The SCRP is designed to work together
with other protocols including TLS/TCP/IP, although it is completely independent
of the underlying protocols.

Author:
Zhang NS (https://github.com/zhangns)
Zifan Li (https://github.com/LiZifan)
Zichao Li (https://github.com/kenathe)
All Rights Reserved.

Version: 0.0.3
Revision: 5 Sep 2015

Status: Under development


1. Concepts

  This section defines abstract entities and the fields needed to describe the
  state and properties of each of them. The name, the data type, the meaning,
  and the definition of validity of each field are specified.

  1.1 SCRP system

    An SCRP system consists of a server and some clients.

  1.2 Server

    The server is a computer program which handles requests from clients.

    Nickname (Unicode string)

      A human-readable name of the server, e.g. "My Awesome Server". length <=
      32.

    Version (ASCII string)

      The version of the server, e.g. "1.0.0". length <= 16.

    Description (Unicode string)

      The description of the server. length <= 256.

    Protocol version (ASCII string)

      The version of SCRP followed by the server, e.g. "1.0.0". length <= 16.

    Time (uint32)

      The current timestamp as seen from the server.

    Uptime (uint32)

      The timestamp when the server started running.

    Number of users (uint32)

      Number of currently registered users.

    Max number of users (uint32)

      The maximum number of registered users since the server started.

    Number of online users (uint32)

      Number of registered users currently online.

    Max number of online users (uint32)

      The maximum number of online users since the server started.

    Number of rooms (uint32)

      Number of registered rooms.

    Max number of rooms (uint32)

      The maximum number of rooms since the server started.

    Messages in (uint32)

      Number of messages received since the server started.

    Messages out (uint32)

      Number of messages sent since the server started.

    Data in (uint64)

      Amount of raw data (implementation-dependent) received in bytes since the
      server started.

    Data out (uint64)

      Amount of raw data (implementation-dependent) sent in bytes since the
      server started.

  1.3 Client

    A client is a computer program which communicates with the server on behalf
    of a user. Clients include but are not limited to general-purpose GUI
    applications and automated scripts.

    Nickname (Unicode string)

      A human-readable name of the client, e.g. "My Awesome Client". length <=
      32.

    Version (ASCII string)

      The version of the client, e.g. "1.0.0". length <= 16.

    Description (Unicode string)

      The description of the client. length <= 256.

    Protocol version (ASCII string)

      The version of SCRP followed by the client, e.g. "1.0.0". length <= 16.

    Time (uint32)

      The current timestamp as seen from the client.

  1.4 User

    A user chats (a) with its friends, and (b) in rooms.

    ID (ASCII string)

      The identifier of the user, e.g. "john_42". It is valid if and only if (a)
      1 <= length <= 16, (b) it only contains alphanumeric characters
      (case-sensitive) and/or underscore(s), and (c) it is unique.

    Password (ASCII string)

      The login credential of the user, e.g. "my_very_secure_password". It is
      valid if and only if (a) 6 <= length <= 64, and (b) it only contains
      printable ASCII characters, i.e. ASCII code 32 - 126 (0x20 - 0x7E).

    Nickname (Unicode string)

      A human-readable name of the user, e.g. "Erwin SchrÃ¶dinger". 1 <= length
      <= 32.

    Description (Unicode string)

      The description of the user. length <= 256.

    Sign up time (uint32)

      The server time when the user signed up on the server.

    Last activity time (uint32)

      The server time of the last time the user logged off from the server.

    Friends (collection of user)

      Each user has zero or more friends.

    Rooms (collection of room)

      Each user belongs to zero or more rooms.

    Mode (enum int)

      The current status of the user. There are currently 2 modes.

      MODE_OFFLINE = 0

        User is not logged in.

      MODE_ONLINE = 1

        User is logged in.
    
  1.5 Room

    A room consists of one or more users. Users send messages in the room.

    ID (ASCII string)

      The identifier of the room. It is valid if and only if (a) 1 <= length <=
      16, (b) it only contains alphanumeric characters (case-sensitive) and/or
      underscore(s), and (c) it is unique.

    Nickname (Unicode string)

      A human-readable name of the room. 1 <= length <= 32.

    Description (Unicode string)

      The description of the room. length <= 256.

    Owner (user)

      The user who owns the room. The room owner has the greatest power in the
      room. Each room must have one and only one owner at all times.

    Admins (collection of user)

      An admin administrates the room. Room admins are appointed by the room
      owner. Room admins have more power than general users but less power than
      the room owner. A room has zero or more admins.

    Members (collection of user)

      A member can receive and send messages in the room. Members include the
      room owner, admins (if any), and general users (if any).

    Password (ASCII string)

      The room password can be optionally set to prevent undesired users from
      entering the room. It is valid if and only if (a) 6 <= length <= 64, and
      (b) it only contains printable ASCII characters, i.e. ASCII code 32 - 126
      (0x20 - 0x7E).

    Access type (enum int)

      The access type determines the condition for users to enter the room.
      There are 3 access types.

      ROOM_ACCESS_PUBLIC = 0

        Any user can enter the room unconditionally.

      ROOM_ACCESS_PASSWORD = 1

        A user can enter the room if and only if the correct password is
        presented.

      ROOM_ACCESS_PERMISSION = 2

        A user can enter the room with the permission of the owner or any
        admin in the room.

  1.6 Room message

    Room messages are what users send in a room. All other users in the same
    room at the time the message was sent can see the message.

    ID (uint32)

      The identifier of the message. It is unique among all messages.

    Time (uint32)

      The server time when the message was received by the server.

    Sender (user)

      The user who sent the message.

    Target room (room)

      The room in which the message was sent.

  1.7 Private message

    A private message is what a user sends to one of its friends. Only the
    specific receiver can see the message.

    ID (uint32)

      The identifier of the message. It is unique among all messages.

    Time (uint32)

      The server time when the message was received by the server.

    Sender (user)

      The user who sent the message.

    Receiver (user)

      The user to whom the message was sent.


2. Request & Response

  Requests are what clients send to the server. A request is represented by a
  JSON dictionary which contains the following fields:

    (a) req_id (uint32|number)

      The serial number of the request. It is unique among all requests from the
      same client in the same session.

    (b) method (string)

      The method name of the request (case-sensitive).

    (c) Other fields dependent on the method.

  The server must sends a response to each request from clients. A response is
  represented by a JSON dictionary which contains the following fields:

    (a) resp_id (uint32|number)

      The req_id of the request that the server is responding to.

    (b) Other fields dependent on the request method, including an error field,
        which represents the error type of the response, defined in Section 3.

  All SCRP request methods are defined below. For each method, the name, the
  JSON data type, and the meaning of each request field and each response field
  are specified. The algorithm for the server to process each request is also
  specified.

  2.1 SIGN_UP

    Sign up a new user.

    Request fields

      user_id (string)

        The ID of the new user.

      user_password (string)

        The password of the new user.

      user_nickname (string)

        The nickname of the new user.

    Response fields

      err (uint32|number)

        300 INVALID_USER_ID

        310 INVALID_USER_PASSWORD

        320 INVALID_USER_NICKNAME

        400 USER_ALREADY_EXISTS

        900 SUCCESS

    Algorithm

      (1) If user_id is invalid, return 300;

      (2) If user_password is invalid, return 310;

      (3) If user_nickname is invalid, return 320;

      (4) If a user with the same ID is found, return 400;

      (5) Add a user:
            user ID = user_id;
            user password = user_password;
            user nickname = user_nickname;
            user description = "";
            user sign up time = Server time;
            user last activity time = Server time;
            user friends = {};
            user rooms = {};
            user mode = MODE_OFFLINE;

      (6) Return 900;

  2.2 LOG_IN

    Log in as an existing user.

    Request fields

      user_id (string)

        The user ID.

      user_password (string)

        The user password.

    Response fields

      err (uint32|number)

        251 USER_ALREADY_LOGGED_IN

        300 INVALID_USER_ID

        310 INVALID_USER_PASSWORD

        402 TOO_MANY_WRONG_ATTEMPTS

        403 ID_PASSWORD_NOT_MATCH

        900 SUCCESS

    Algorithm

      (1) If the client already logged in with a user successfully, return 251;

      (2) If user_id is invalid, return 300;

      (3) If user_password is invalid, return 310;

      (4) If there are too many wrong attempts (implementation dependent),
          return 402;

      (5) If user_id and user_password do not match, return 403;

      (6) Update user with user_id:
            user mode = MODE_ONLINE;

      (7) For each user_x in current user's Friends:
            TODO: inform online 
            Push <server push> to user_x;

      (8) For each room_x in current user's Rooms:
            For each user_x in room_x:
              TODO: inform online 
              Push <server push> to user_x

      (9) Return 900;

  2.3 DELETE_USER

    Delete the current user permanently.

    This request can only be sent from a client with a user that is logged in.

    Request fields

      user_password (string)

        The user password.

    Response fields

      err (uint32|number)

        250 USER_NOT_LOGGED_IN

        310 INVALID_USER_PASSWORD

        402 TOO_MANY_WRONG_ATTEMPTS

        403 ID_PASSWORD_NOT_MATCH

        900 SUCCESS

    Algorithm

      (1) If the user is not logged in, return 250;

      (2) If user_password is not valid, return 310;

      (3) If there are too many wrong attempts, return 402;

      (4) If current user ID and user_password do not match, return 403;

      (5) For each user_x in current user's Friends:
            Remove current user from user_x.Friends;
            TODO: inform disappear 
            Push <server push> to user_x;

      (6) For each room_x in current user's Rooms:
            For each user_x in room_x:
              TODO: inform disappear 
              Push <server push> to user_x

      (6) Delete user record with current user ID;

      (7) Return 900;

  2.4 CHANGE_USER_PASSWORD

    Change the user password.

    This request can only be sent from a client with a user that is logged in.

    Request fields

      old_user_password (string)

        The current password.

      new_user_password (string)

        The new password.

    Response fields

      err (uint32|number)

        250 USER_NOT_LOGGED_IN 

        310 INVALID_USER_PASSWORD

        402 TOO_MANY_WRONG_ATTEMPTS

        403 ID_PASSWORD_NOT_MATCH

        900 SUCCESS

    Algorithm

      (1) If the user is not logged in, return 250;

      (2) If old_user_password or new_user_password is not valid, return 310;

      (3) If there are too many wrong attempts, return 402;

      (4) If current user ID and old_user_password do not match, return 403;

      (5) Update current user:
            user password = new_user_password;

      (6) Return 900;

  2.5 CHANGE_USER_NICKNAME

    Change the user nickname.

    This request can only be sent from a client with a user that is logged in.

    Request fields

      user_nickname (string)

        The new nickname.

    Response fields

      err (uint32|number)

        250 USER_NOT_LOGGED_IN 

        320 INVALID_USER_NICKNAME

        900 SUCCESS

    Algorithm

      (1) If the user is not logged in, return 250;

      (2) If user_nickname is not valid, return 320;

      (3) Update current user:
            user nickname = user_nickname;

      (4) For each user_x in current user's Friends:
            TODO: inform nickname change
            Push <server push> to user_x;

      (5) For each room_x in current user's Rooms:
            For each user_x in room_x:
              TODO: inform nickname change 
              Push <server push> to user_x

      (6) Return 900;

  2.6 GET_TIME

    Get the server time when the request is received by the server. This method
    can be used to estimate the network latency.

    Request fields

      (None)

    Response fields

      time (uint32|number)

      err (uint32|number)

        900 SUCCESS

    Algorithm

      (1) Return 900 with time = server time;

  2.7 CREATE_ROOM

    Create a new room.

    This request can only be sent from a client with a user that is logged in.

    Request fields

      room_id (string)

        The room ID.

      room_nickname (string)

        The room nickname.

      room_access (enum|number)

        The access type of the room.

      [room_password] (string)

        The room password (when room_access == ROOM_ACCESS_PASSWORD).

    Response fields

      err (uint32|number)

        250 USER_NOT_LOGGED_IN 

        301 INVALID_ROOM_ID

        311 INVALID_ROOM_PASSWORD

        321 INVALID_ROOM_NICKNAME

        340 INVALID_ROOM_ACCESS_TYPE

        401 ROOM_ALREADY_EXISTS

        900 SUCCESS

    Algorithm

      (1) If the user is not logged in, return 250;

      (2) If room_id is invalid, return 301;

      (3) If room_password is invalid, return 311;

      (4) If room_nickname is invalid, return 321;

      (5) If room_access is invalid, return 340;

      (6) If a room with the same room ID is found, return 401;

      (7) Add a room:
            room ID = room_id;
            room nickname = room_nickname;
            room description = "";
            room owner = current user;
            room admins = {};
            room members = {current user};
            room access type = room_access;
            If room_access ==  ROOM_ACCESS_PASSWORD:
              room password = room_password;

      (8) Update current user:
            user rooms += the room added;
          TODO: Anything more? Available for search? (NS: what search?)

      (9) Return 900;

  2.8 ENTER_ROOM

    Enter an existed room.

    This request can only be sent from a client with a user that is logged in.

    Request fields

      room_id (string)

        The room ID.

      room_password (string)

        The room password [when room access type = ROOM_ACCESS_PASSWORD].

    Response fields

      err (uint32|number)

        250 USER_NOT_LOGGED_IN 

        301 INVALID_ROOM_ID

        311 INVALID_ROOM_PASSWORD

        402 TOO_MANY_WRONG_ATTEMPTS

        403 ID_PASSWORD_NOT_MATCH

        900 SUCCESS

    Algorithm

      (1) If the user is not logged in, return 250;

      (2) If room_id is invalid, return 301;

      (3) If room_password is invalid, return 311;

      (4) If there are too many wrong attempts, return 402;

      (5) If room access type == ROOM_ACCESS_PASSWORD and room_password is not
          correct, return 403;

      (6) If room access type == ROOM_ACCESS_PERMISSION:
            TODO: server push to creator and each admin to ask for permission
            return 900;

      (7) Update room:
            room members += current user;

      (8) For each user in room members:
            TODO: inform new member
            Push <server push> to user

      (9) Return 900;

  2.9 REMOVE_ROOM

    Remove an existing room permanently.

    This request can only be sent from the owner of the room who must be logged
    in.

    Request fields

      room_id (string)

        The room ID.

    Response fields

      err (number)

        250 USER_NOT_LOGGED_IN

        301 INVALID_ROOM_ID

        801 FORBIDDEN

        900 SUCCESS

    Algorithm

      (1) If the user is not logged in, return 250;

      (2) If room_id is not valid, return 301;

      (3) If current user != room owner, return 801;

      (4) For each user in room members:
            user rooms -= room;
            TODO: server push to inform removal

      (5) Delete the room with room_id;

      (6) Return 900;

  2.10 CHANGE_ROOM_ACCESS

    Change the access settings of a room (access type and password).

    This request can only be sent from the room owner or the admins who 
    must be logged in.

    Request fields

      room_id (string)

        The room ID.

      room_access_type (enum|number)

        The new room access type.

      [room_password] (string)

        The new room password (when room_access_type == ROOM_ACCESS_PASSWORD).

    Response fields

      err (number)

        250 USER_NOT_LOGGED_IN

        301 INVALID_ROOM_ID

        311 INVALID_ROOM_PASSWORD

        340 INVALID_ROOM_ACCESS_TYPE

        801 FORBIDDEN

        900 SUCCESS

    Algorithm

      (1) If the user is not logged in, return 250;

      (2) If room_id is not valid, return 301;

      (3) If room_access_type == ROOM_ACCESS_PASSWORD and room_password is not
          valid, return 311;

      (4) If room_access_type is invalid, return 340;

      (5) If current user != room owner, return 801;

      (6) Update the room with room_id:
            room access type = room_access_type;
            If room_access_type == ROOM_ACCESS_PASSWORD:
              room password = room_password;

      (7) Return 900;

  2.11 CHANGE_ROOM_NICKNAME

    Change the nickname of a room.

    This request can only be sent from the owner or the admins of the room 
    who must be logged in.

    Request fields

      room_id (string)

        The room ID.

      new_room_nickname (string)

        The new room nickname. 

    Response fields

      err (number)

        250 USER_NOT_LOGGED_IN

        301 INVALID_ROOM_ID

        321 INVALID_ROOM_NICKNAME

        801 FORBIDDEN

        900 SUCCESS

    Algorithm

      (1) If the user is not logged in, return 250;

      (2) If room ID is not valid, return 301;

      (3) If the new room nickname is not valid, return 321;

      (4) If the user is not authorized to send the request, return 801;

      (5) room nickname = new_room_nickname

      (6) TODO: Server push to every member of the room to inform change

      (7) Return 900;

  2.12 REMOVE_USER_FROM_ROOM

    Remove a user from the room.

    This request can only be sent from the admins or the owner of the room 
    who must be logged in. The admins can not remove each other or the owner 
    from the room. The owner can remove anyone else from the room, 
    including admins.

    Request fields

      subject_user_id (string)

        The user ID of the subject (the user who is going to be removed).

      room_id (string)

        The room ID.

    Response fields

      err (number)

        250 USER_NOT_LOGGED_IN

        300 INVALID_USER_ID

        301 INVALID_ROOM_ID

        801 FORBIDDEN

        900 SUCCESS

    Algorithm

      (1) If the action performer is not logged in, return 250;

      (2) If the ID of the subject is not valid, return 300;

      (3) If room ID is not valid, return 301;

      (4) If the user is not authorized to send the request, return 801;

      (5) room members -= subject_user_id

      (6) TODO: Server push to every member of the room to inform change

      (7) Return 900;


  2.13 SET_ADMIN

    Set a current general member of the room to be an admin.

    This request can only be sent from the owner of the room who 
    must be logged in.

    Request fields

      subject_user_id (string)

        The user ID of the subject (the user who is going to be set as an admin).

      room_id (string)

        The room ID.

    Response fields

      err (number)

        250 USER_NOT_LOGGED_IN

        300 INVALID_USER_ID

        301 INVALID_ROOM_ID

        801 FORBIDDEN

        900 SUCCESS

    Algorithm

      (1) If the user is not logged in, return 250;

      (2) If the ID of the subject is not valid, return 300;

      (3) If room ID is not valid, return 301;

      (4) If the user is not authorized to send the request, return 801;

      (5) room admins += subject_user_id

      (6) TODO: Server push to every member of the room to inform change
            QUESTION: Maximum admin number? 

      (7) Return 900;

  2.14 REMOVE_ADMIN

    Set a current admin of the room to be a general member.

    This request can only be sent from the owner of the room who 
    must be logged in.

    Request fields

      subject_user_id (string)

        The user ID of the subject (the user who is going to be set as an admin).

      room_id (string)

        The room ID.

    Response fields

      err (number)

        250 USER_NOT_LOGGED_IN

        300 INVALID_USER_ID

        301 INVALID_ROOM_ID

        801 FORBIDDEN

        900 SUCCESS

    Algorithm

      (1) If the user is not logged in, return 250;

      (2) If the ID of the subject is not valid, return 300;

      (3) If room ID is not valid, return 301;

      (4) If the user is not authorized to send the request, return 801;

      (5) room admins -= subject_user_id

      (6) TODO: Server push to every member of the room to inform change

      (7) Return 900;


  2.15 ADD_FRIEND

    Send a friend request to another user. 

    This request can only be sent from a user that is logged in

    Request fields

      subject_user_id (string)

        The user ID of the subject (the receiver of the request).

      verification message (string)

        Messages that is used to allow the subject (the receiver of the request)
        verify your identity.

    Response fields

      err (number)

        250 USER_NOT_LOGGED_IN

        300 INVALID_USER_ID

        320 INVALID_USER_NICKNAME

        330 INVALID_USER_DESCRIPTION

        900 SUCCESS

    Algorithm

      (1) If the user is not logged in, return 250;

      (2) If the user ID of the subject is not valid, return 300;

      (3) TODO: Server push to the subject.

      (4) Return 900;

  2.16 REMOVE_FRIEND

    Remove a friend. 

    This request can only be sent from a user that is logged in

    Request fields

      subject_user_id (string)

        The user ID of the subject (the receiver of the request).

    Response fields

      err (number)

        250 USER_NOT_LOGGED_IN

        300 INVALID_USER_ID

        801 FORBIDDEN

        900 SUCCESS

    Algorithm

      (1) If the user is not logged in, return 250;

      (2) If the ID of the subject is not valid, return 300;

      (3) If the user is not authorized to send the request, return 801;

      (4) TODO: Server push to the subject.

      (5) Return 900;

  2.17 CHANGE_USER_DESCRIPTION

    Change the user description.

    This request can only be sent from a client with a user that is logged in.

    Request fields

      user_description (string)

        The new description.

    Response fields

      err (uint32|number)

        250 USER_NOT_LOGGED_IN 

        330 INVALID_USER_DESCRIPTION

        900 SUCCESS

    Algorithm

      (1) If the user is not logged in, return 250;

      (2) If user_description is not valid, return 330;

      (3) Update current user:
            user description = user_description;

      (4) For each user_x in current user's Friends:
            TODO: inform description change
            Push <server push> to user_x;

      (5) For each room_x in current user's Rooms:
            For each user_x in room_x:
              TODO: inform description change 
              Push <server push> to user_x

      (6) Return 900;

  2.18 CHANGE_ROOM_DESCRIPTION

    Change the description of a room.

    This request can only be sent from the owner or the admins of the room 
    who must be logged in.

    Request fields

      room_id (string)

        The room ID.

      new_room_description (string)

        The new room nickname. 

    Response fields

      err (number)

        250 USER_NOT_LOGGED_IN

        301 INVALID_ROOM_ID

        331 INVALID_ROOM_DESCRIPTION

        801 FORBIDDEN

        900 SUCCESS

    Algorithm

      (1) If the user is not logged in, return 250;

      (2) If room ID is not valid, return 301;

      (3) If the new room description is not valid, return 331;

      (4) If the user is not authorized to send the request, return 801;

      (5) room description = new_room_description

      (6) TODO: Server push to every member of the room to inform change

      (7) Return 900;

  2.19 GET_USER_LAST_ACTIVITY_TIME

  Get the user's last activity time.

  This request can only be sent from a client with a user that is logged in.

    Request fields

      user_id (string)

        The user ID.

    Response fields

      time (uint32|number)

      err (uint32|number)

        900 SUCCESS

    Algorithm

      (1) Return 900 with time = last activity time;

  2.20 APPROVE_REQUEST (like add friend or join room)

  2.21 IGNORE_REQUEST

  2.22 REJECT_REQUEST

  2.23 SEND_ROOM_MESSAGE

  2.24 SEND_PRIVATE_MESSAGE

  2.25 RECEIVE_MESSAGE (when an user logged in and want to see the message that is sent 
  during his logged off period)

  2.26 GET_ROOM_ACCESS_TYPE

  2.27 SEARCH_USER

  2.28 SEARCH_ROOM

3. Error
  
  Error is an indispensable part of the response to the requests sent from clients to server.

  Each type of error has an error number, a name, and a description.

  Note: The algorithms specified in Section 2 and the error numbers in this
  section are designed so that when the requirements of multiple errors are met
  simultaneously, the server must respond with the error with the smallest error
  number. This suggests that the server should usually check for errors in
  ascending order of error numbers, whenever necessary.

  233 BAD_REQUEST

    The request is not understood because it violates the SCRP specification
    (the version followed by the server) to a large extent, and is thus
    ignored.

  250 USER_NOT_LOGGED_IN

    The server refuses to process the request because the client is not logged
    in.

  251 USER_ALREADY_LOGGED_IN

    The server refuses to process the request because the client is already
    logged in.

  300 INVALID_USER_ID

    The format of the user ID is invalid.

  301 INVALID_ROOM_ID

    The format of the room ID is invalid.

  310 INVALID_USER_PASSWORD

    The format of the user password is invalid.

  311 INVALID_ROOM_PASSWORD

    The format of the room password is invalid.

  320 INVALID_USER_NICKNAME

    The format of the user nickname is invalid.

  321 INVALID_ROOM_NICKNAME

    The format of the room nickname is invalid.

  330 INVALID_USER_DESCRIPTION

    The format of the user description is invalid.

  331 INVALID_ROOM_DESCRIPTION

    The format of the room description is invalid

  340 INVALID_ROOM_ACCESS_TYPE

    The room access type is invalid.

  TODO: Other 3xx invalid errors

  Note: Errors with error number smaller than 400 never occurs if the client
  follows this specification.

  400 USER_ALREADY_EXISTS

    The user ID already exists.

  401 ROOM_ALREADY_EXISTS

    The Room ID already exists.

  402 TOO_MANY_WRONG_ATTEMPTS

    Wrong attempts are too often.

  403 ID_PASSWORD_NOT_MATCH

    The ID and the password do not match.

  TODO: Other errors

  801 FORBIDDEN

    The sender of the request is not authorized to perform the requested action.

  900 SUCCESS

    The requested action was performed without errors.

  999 UNKNOWN

    An unexpected error occurred.

    Note: This error never occurs if the server is properly developed following
    this specification. The client can assume that this error never occurs.

4. Server push

  Server pushes are updates that users receive. If the target user is online,
  the server must send the push to the corresponding client immediately. If
  the target user is offline, the server must keep the push until the the user
  logs in.

  A server push is analogous to a request, but different in a major way that
  a server push does not need a response.

  4.1 NEW_PRIVATE_MESSAGE

  4.2 NEW_ROOM_MESSAGE

  4.3 NEW_FRIEND_REQUEST

  4.4 ENTER_ROOM_REQUEST

  4.5 USER_LEAVE_ROOM

  4.6 APPOINTED_AS_ADMIN

  4.7 FORCED_TO_LOGGED_OFF (?)
