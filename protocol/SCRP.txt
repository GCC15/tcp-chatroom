This is the specification of the Stupid Chat Room Protocol (SCRP), a lightweight
application-layer communication protocol used in the project tcp-chatroom
(https://github.com/GCC15/tcp-chatroom). The SCRP is designed to work together
with other protocols including TLS/TCP/IP, although it is completely independent
of the underlying protocols.

Author:
Zhang NS (https://github.com/zhangns)
Zifan Li (https://github.com/LiZifan)
Zichao Li (https://github.com/kenathe)
All Rights Reserved.

Version: 0.0.2
Revision: 3 Sep 2015

Status: Under development


1. Concepts

  This section defines abstract entities and the fields needed to describe the
  state and/or properties of each of them.

  1.1 SCRP system

    An SCRP system consists of a server and some clients.

  1.2 Server

    The server is a computer program which handles requests from clients.

    Nickname (Unicode string)

      A human-readable name of the server, e.g. "My Awesome Server". length <=
      32.

    Version (ASCII string)

      The version of the server, e.g. "1.0.0". length <= 16.

    Description (Unicode string)

      The description of the server. length <= 256.

    Protocol version (ASCII string)

      The version of SCRP followed by the server, e.g. "1.0.0". length <= 16.

    Time (uint32)

      The current timestamp as seen from the server.

    Uptime (uint32)

      The timestamp when the server started running.

    Number of users (uint32)

      Number of currently registered users.

    Max number of users (uint32)

      The maximum number of registered users since the server started.

    Number of online users (uint32)

      Number of registered users currently online.

    Max number of online users (uint32)

      The maximum number of online users since the server started.

    Number of rooms (uint32)

      Number of registered rooms.

    Max number of rooms (uint32)

      The maximum number of rooms since the server started.

    Messages in (uint32)

      Number of messages received since the server started.

    Messages out (uint32)

      Number of messages received since the server started.

    Data in (uint64)

      Amount of raw data received in bytes since the server started. The
      interpretation of "raw data" is implementation-dependent.

    Data out (uint64)

      Amount of raw data sent in bytes since the server started. The
      interpretation of "raw data" is implementation-dependent.

  1.3 Client

    A client is a computer program which communicates with the server on behalf
    of a user. Clients include but are not limited to general-purpose GUI
    applications and automated scripts.

    Nickname (Unicode string)

      A human-readable name of the client, e.g. "My Awesome Client". length <=
      32.

    Version (ASCII string)

      The version of the client, e.g. "1.0.0". length <= 16.

    Description (Unicode string)

      The description of the client. length <= 256.

    Protocol version (ASCII string)

      The version of SCRP followed by the client, e.g. "1.0.0". length <= 16.

    Time (uint32)

      The current timestamp as seen from the client.

  1.4 User

    A user chats (a) with its friends, and (b) in rooms.

    ID (ASCII string)

      The identifier of the user, e.g. "john_42". It is valid if and only if (a)
      1 <= length <= 16, (b) it only contains alphanumeric characters
      (case-sensitive) and/or underscore(s), and (c) it is unique.

    Password (ASCII string)

      The login credential of the user, e.g. "my_very_secure_password". It is
      valid if and only if (a) 6 <= length <= 64, and (b) it only contains
      printable ASCII characters, i.e. ASCII code 32 - 126 (0x20 - 0x7E).

    Nickname (Unicode string)

      A human-readable name of the user, e.g. "Erwin SchrÃ¶dinger". 1 <= length
      <= 32.

    Description (Unicode string)

      The description of the user. length <= 256.

    Sign up time (uint32)

      The server time when the user signed up on the server.

    Last activity time (uint32)

      The server time of the last time the user logged off from the server.

    Friends (collection of user)

      Each user has zero or more friends.

    Rooms (collection of room)

      Each user belongs to zero or more rooms.

  1.5 Room

    A room consists of one or more users. Users send messages in the room.

    ID (ASCII string)

      The identifier of the room. It is valid if and only if (a) 1 <= length <=
      16, (b) it only contains alphanumeric characters (case-sensitive) and/or
      underscore(s), and (c) it is unique.

    Nickname (Unicode string)

      A human-readable name of the room. 1 <= length <= 32.

    Description (Unicode string)

      The description of the room. length <= 256.

    Creator (user)

      The user who owns the room. The room creator has the greatest power in the
      room. Each room must have one creator.

    Admins (collection of user)

      An admin administrates the room. Room admins are appointed by the room
      creator. Room admins have more power than general users but less power
      than the room creator. A room has zero or more admins.

    Password (ASCII string)

      The room password can be optionally set to prevent undesired users from
      entering the room. It is valid if and only if (a) 6 <= length <= 64,
      and (b) it only contains printable ASCII characters, i.e. ASCII code 32 -
      126 (0x20 - 0x7E).

    Access type (enum int)

      The access type determines the condition for users to enter the room.
      There are 3 access types.

      ROOM_ACCESS_PUBLIC = 0

        Any user can enter the room unconditionally.

      ROOM_ACCESS_PASSWORD = 1

        A user can enter the room if and only if the correct password is
        presented.

      ROOM_ACCESS_PERMISSION = 2

        A user can enter the room with the permission of the creator or any
        admin in the room.

  1.6 Room message

    Room messages are what users send in a room. All other users in the same
    room at the time the message was sent can see the message.

    ID (uint32)

      The identifier of the message. It is unique among all messages.

    Time (uint32)

      The server time when the message was received by the server.

    Sender (user)

      The user who sent the message.

    Target room (room)

      The room in which the message was sent.

  1.7 Private message

    A private message is what a user sends to one of its friends. Only the
    specific receiver can see the message.

    ID (uint32)

      The identifier of the message. It is unique among all messages.

    Time (uint32)

      The server time when the message was received by the server.

    Sender (user)

      The user who sent the message.

    Receiver (user)

      The user to whom the message was sent.

2. Request

  Requests are what a client sends to the server. A request is represented by a
  JSON dictionary which contains the following fields.

    (a) req_id (uint32)

      The serial number of the request. It is unique among all requests from the
      same client in the same session.

    (b) method (string)

        The method name of the request (case-sensitive).

    (c) (other fields dependent on the method)

  All SCRP request methods are defined below, including the fields required for
  each method, and the corresponding response fields.

  2.1 SIGN_UP

    Sign up a new user.

    Request fields

      user_id (number)

        The ID of the new user.

      user_pass (string)

        The password of the new user.

    Response fields

      err (number)

        {900, 901, 902, 903, 999}

  2.2 LOG_IN

    Log in as an existing user.

    Request fields

      user_id (number)

        The user ID.

      user_pass (string)

        The user password.

    Response fields

      err (number)

        {900, 901, 902, 950, 951, 999}

  2.3 DELETE_USER

    Delete a user.

    Request fields

      user_id (user)

        The ID of the user to be deleted.

    Response fields

      err (number)

        {900, 999}

  2.4 CHANGE_PASS

    Change the user password.

    Request fields

      user_pass

        The password of the user.

    Response fields

      err

        {900, 903, 999}

  2.5 GET_TIME

  2.6 CREATE_ROOM

  2.7 REMOVE_ROOM

  2.8 REMOVE_USER

  2.9 SET_ADMIN

  2.10 REMOVE_ADMIN

  2.11 ADD_FRIEND

  2.12 REMOVE_FRIEND

  2.13 ENTER_ROOM

  2.14 CHANGE_ROOM_ACCESS

3. Error

  Each type of error has an error number, a name, and a description.

  900 SUCCESS

    The requested action was performed without errors.

  901 USER_ALREADY_EXISTS

    User ID already exists.

  902 INVALID_USER_ID

    The format of the user ID is invalid.

    Note: The client should check the format of user ID first, and ideally the
    client should never receive this response.

  903 INVALID_USER_PASS

    The user password is invalid.

  905 INVALID_ROOM_ID

    The format of the room ID is invalid.

  910 ROOM_ALREADY_EXISTS

    Room ID already exists.

  950 ID_PASSWORD_NOT_MATCH

    The user ID and the user password do not match.

  951 TOO_MANY_WRONG_ATTEMPTS

    Wrong attempts are too often.

  998 BAD_REQUEST

    The request was not understood and was ignored.

  999 UNKNOWN

    An unexpected error occurred.
