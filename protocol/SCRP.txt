This is the specification of Stupid Chat Room Protocol (SCRP), a lightweight
application-layer communication protocol used in the project tcp-chatroom
(https://github.com/GCC15/tcp-chatroom). SCRP is designed to work together with
TLS/TCP/IP, although it is completely independent of the underlying protocols.

Author:
Zhang NS (https://github.com/zhangns)
Zifan Li (https://github.com/LiZifan)
Zichao Li (https://github.com/kenathe)
All Rights Reserved.

Version: 0.0.2
Revision: 30 Aug 2015

Status: Under development


1. Concepts

  Abstract concepts and related quantities are defined in this section.

  1.1 SCRP system

    An SCRP system consists of a server and some clients.

  1.2 Server

    The server is a computer program which handles requests from clients. It
    manages users, messages, rooms, and their interactions.

    Server nickname (Unicode string)

      A human-readable name of the server, e.g. "My Awesome Server". length <=
      16.

    Server version (ASCII string)

      The version of the server, e.g. "1.0.0". length <= 16.

    Server description (Unicode string)

      A description of the server. length <= 256.

    Server protocol version (ASCII string)

      The version of SCRP followed by the server, e.g. "1.0.0". length <= 16.

    Server time (uint32)

      The current timestamp as seen from the server.

    Server uptime (uint32)

      The timestamp when the server started running.

    Number of users (uint32)

      Number of currently registered users.

    Max number of users (uint32)

      The maximum number of users since the server started.

    Number of online users (uint32)

      Number of registered users currently online.

    Max number of online users (uint32)

      The maximum number of online users since the server started.

    Number of rooms (uint32)

      (Omitted)

    Max number of rooms (uint32)

      The maximum number of rooms since the server started.

    Number of messages received (uint32)

      (Omitted)

    Number of messages sent (uint32)

      (Omitted)

    Amount of raw data received in bytes (uint64)

      The interpretation of "raw data" is implementation-dependent.

    Amount of raw data sent in bytes (uint64)

      The interpretation of "raw data" is implementation-dependent.

  1.3 Client

    A client is a computer program which communicates with the server on behalf
    of a user. It can be a general-purpose GUI application, or an automated or
    semi-automated script.

    Client nickname (Unicode string)

      A human-readable name of the client, e.g. "My Awesome Client". length <=
      16.

    Client version (ASCII string)

      The version of the client, e.g. "1.0.0". length <= 16.

    Client description (Unicode string)

      A description of the client. length <= 256.

    Client protocol version (ASCII string)

      The version of SCRP followed by the client, e.g. "1.0.0". length <= 16.

    Client time (uint32)

      The current timestamp as seen from the client.

  1.4 User

    A user chats (a) with its friends, and (b) in rooms.

    User ID (ASCII string)

      The identifier of the user, e.g. "john_42". It is valid if and only if (a)
      1 <= length <= 16, (b) it only contains alphanumeric characters
      (case-sensitive) and/or underscore(s), and (c) it is unique.

    User password (ASCII string)

      The login credential of the user, e.g. "my_very_secure_password". It is
      valid if and only if (a) 6 <= length <= 64, and (b) it only contains
      printable ASCII characters, i.e. ASCII code 32 - 126 (0x20 - 0x7E).

    User nickname (Unicode string)

      A human-readable name of the user, e.g. "John Doe". 1 <= length <= 16.

    User description (Unicode string)

      The description of the user. length <= 256.

    User sign up time (uint32)

      The server time when the user signed up on the server.
      
    Friends (collection of user)
    
      Each user has zero or more friends.

    Rooms (collection of room)
    
      Each user belongs to zero or more rooms.
    
    Last activity time (uint32)
      The server time of the last time the user logged off from the server.

  1.5 Room

    A room consists of one or more users. Users send messages in the room.

    Room ID (ASCII string)

      The identifier of the room. It is valid if and only if (a) 1 <= length <=
      16, (b) it only contains alphanumeric characters (case-sensitive) and/or
      underscore(s), and (c) it is unique.

    Room password (ASCII string)

      A room password is set to prevent undesired users from entering the room.
      It is valid if and only if (a) 6 <= length <= 64, and (b) it only contains
      printable ASCII characters, i.e. ASCII code 32 - 126 (0x20 - 0x7E).

    Room nickname (Unicode string)

      A human-readable name of the room. 1 <= length <= 16.

    Room description (Unicode string)

      The description of the room. length <= 256.

    Room access type

      ROOM_ACCESS_PUBLIC

      ROOM_ACCESS_PASSWORD

      ROOM_ACCESS_PERMISSION
    
    Room creator (user)
      Creator of the room. Room creator has the highest authority in the room.

    Room admin (user)

      A special type of user in the room appointed by the room creator.
      A room has zero or more admins.

  1.6 Message

    Messages are what users send in a room. All other users in the same
    room at the time the message was sent can see the message.

    Message ID

      The identifier of the message. It is unique among all messages. 

    Message Room ID

      The Room ID of the room in which the message was sent.

    Message time

      The server time when the message was received by the server.

    Message sender

      The user who sent the message.

    Message receiver

      The users who received the message.

2. Request

  Requests are what a client sends to the server. A request consists of

    (a) A serial number (uint32)
    (b) A method 
    (c) Other fields dependent on the method

  2.1 SIGN_UP

    Sign up a new user.

    Request fields

      user_id

        The ID of the new user.

      user_pass

        The password of the new user.

    Response fields

      err

        {900, 901, 902, 903}

  2.2 LOG_IN
    
    Log in as an existed user.

    Request fields

      user_id

        The ID of the user.

      user_pass

        The password of the user.

    Response fields

      err

        {900, 950, 951}

  2.3 LOG_OFF

  2.4 DELETE_USER

    Delete the user.

    Request fields

      user_id

        The ID of the user.

    Response fields

      err

        {900}

  2.5 CHANGE_PASS

    Change the user password.

    Request fields

      user_pass

        The password of the user.

    Response fields

      err

        {900, 903}
  
  2.6 GET_TIME

  2.7 CREATE_ROOM

  2.8 REMOVE_ROOM

  2.9 REMOVE_USER
  
  2.10 SET_ADMIN

  2.11 REMOVE_ADMIN

  2.12 ADD_FRIEND

  2.13 REMOVE_FRIEND
  
  2.14 ENTER_ROOM

  2.15 CHANGE_ROOM_ACCESS


3. Response

  Each type of error has an error number, a name, and a description.

  900 SUCCESS (All requests)

    The requested action was performed without errors.

  901 USER_ALREADY_EXISTS (SIGN_UP)

    User ID already exists.

  902 INVALID_USER_ID (SIGN_UP)

    The format of the user ID is invalid.
    Note: The client should check the format of user Id first, 
    and ideally the client should never receive this response.

  903 INVALID_USER_PASS (SIGN_UP, CHANGE_PASS)

    The user password is invalid.

  905 INVALID_ROOM_ID (CREATE_ROOM)

    The format of the room ID is invalid.

  910 ROOM_ALREADY_EXISTS (CREATE_ROOM)

    Room ID already exists.

  950 ID_PASSWORD_NOT_MATCH (LOG_IN)

    The user ID and the user password do not match.

  951 TOO_MANY_WRONG_ATTEMPTS (LOG_IN)

    Wrong attempts are too often.

  998 BAD_REQUEST (All requests)

    The request was not understood and was ignored.

  999 UNKNOWN (All requests)

    An unexpected error occurred.
